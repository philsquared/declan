# # for comments
# type/ variable names in `backticks` can include otherwise illegal characters
# variables are in the mathematical sense, ie immutable

# enums
# (can possibly extend to full sum types, with associated values)
type EnumSingle = e1 | e2 | e3  # single line

type EnumMulti =  # multiple lines (consistent indentation)
	| e1
	| e2 : String # associated data
	| e3

type EnumMulti2 =  # multiple lines, with multi-line records
	| e1
	| e2 : { f1 : String; f2 : Int } # associated record
	| e3

type EnumMulti2 =  # multiple lines, with multi-line records
	| e1
	| e2 : # associated, multiline, record
		f1 : String
		f2 : Int 
	| e3


# record/ product type
type Record =
	f1: String key # designates a key field
	f2: String ref # designates a ref field - ie refers to a key in another type
	f3: Int
	f4: Float? # an optional type

type Record2 = f1: String @attribute; f2: Int @attribute1 @attribute2

# (attributes will be described later)

# variable (single line)
let v1 = "a string value" # inferred type
let v2 : String = "another string value" # explicit type

# variable (multiple lines)
let v3 = # inferred type
	42
let v4 : Float = # explicit type
	3.141

# array (single line)
let a1 = [1, 2, 3] # inferred types
let a2 : [String] = ["1", "two", "3"] # explicit types

# array (multi line)
let a3 = # inferred types
	1
	1
	2

let a4 : [Float] = # explicit types
	1.23
	3.45
	4.67

let a5 = # can optionally use dashes as separators
	1.23
	--- # any number of dashes as separators
	3.45
	---
	4.67


# objects
let o1 : Record2 = ( f1 = "a string", f2 = 42 ) # single line

let o2 : Record2 = # multiline
	f1 = "a string"
	f2 = 7

# arrays of objects
let ao : [Record2] =
	f1 = "one"
	f2 = 1
	--- # any number of dashes as separators (not optional for objects)
	f1 = "two"
	f2 = 2
	---
	f1 = "three"
	f2 = 3

# built in types:
"string"
'string'

"""
multiline string
  leading whitespace is significant from indent if \"""
triple quotes can be escaped with a backslash, as above
backslashes can be escaped with double backslash, 
  e.g. \\\\ evaluates to two backslahes
"""

	'''
	another
	multiline string
	no indentation here
	'''

true | false # Bool
42 # Int
3.141 # Float
2018/05/15 # Date
2018/05/15T19:16:00Z # DateTime (https://www.w3.org/TR/NOTE-datetime)
https://cpponsea.uk # URL/ Filename

# types can be annotated
42 : Int

# or used directly:
Int( 42 )

# strong type aliases can be created with:
type <name> : <aliased type>

# e.g.
type Description : String

# The alias behaves the same as the underlying type, but the processor receives the alias type name, 
# so may treat it differently - more like a "derived" type

# Attributes are introduced with the @ prefix, and may be associated with any declaration or definition
# They trail the entity (type or variable) they apply to
# They can be values of any type (here a string is inferred) - including objects
let s1 @"Not just any string" = "Just a string"


type AnotherType =
	m1 : String @Record2( f1="string data", f2=7) # Multiple args must be named
	m2 : Int    @Description("This is an int") # Single args, names may be ommitted

# escaping rules, import TBD
